/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  JobListing as PrismaJobListing,
  Application as PrismaApplication,
  Company as PrismaCompany,
} from "@prisma/client";

export class JobListingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.JobListingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.jobListing.count(args);
  }

  async jobListings(
    args: Prisma.JobListingFindManyArgs
  ): Promise<PrismaJobListing[]> {
    return this.prisma.jobListing.findMany(args);
  }
  async jobListing(
    args: Prisma.JobListingFindUniqueArgs
  ): Promise<PrismaJobListing | null> {
    return this.prisma.jobListing.findUnique(args);
  }
  async createJobListing(
    args: Prisma.JobListingCreateArgs
  ): Promise<PrismaJobListing> {
    return this.prisma.jobListing.create(args);
  }
  async updateJobListing(
    args: Prisma.JobListingUpdateArgs
  ): Promise<PrismaJobListing> {
    return this.prisma.jobListing.update(args);
  }
  async deleteJobListing(
    args: Prisma.JobListingDeleteArgs
  ): Promise<PrismaJobListing> {
    return this.prisma.jobListing.delete(args);
  }

  async findApplications(
    parentId: string,
    args: Prisma.ApplicationFindManyArgs
  ): Promise<PrismaApplication[]> {
    return this.prisma.jobListing
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .applications(args);
  }

  async getCompany(parentId: string): Promise<PrismaCompany | null> {
    return this.prisma.jobListing
      .findUnique({
        where: { id: parentId },
      })
      .company();
  }
}
